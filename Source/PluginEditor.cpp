/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "MyLookAndFeel.h"

//==============================================================================
HierarchicalShiftAudioProcessorEditor::HierarchicalShiftAudioProcessorEditor (HierarchicalShiftAudioProcessor& p):
AudioProcessorEditor (&p),
processor (p),
record("Rec"),
numSteps(Slider::SliderStyle::RotaryVerticalDrag,Slider::TextBoxBelow),
generateStyle(TabbedButtonBar::Orientation::TabsAtTop)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    myLookNFeel = new MyLookAndFeel();
    setLookAndFeel(myLookNFeel);
    addAndMakeVisible(record);

    
    record.setBounds( RelativeRectangle ("right - parent.width / 2,\
                                         bottom - parent.height / 4,\
                                         parent.width / 2 ,\
                                         parent.height / 4 "));
    
    
    record.addListener(this);
    
    
    addAndMakeVisible(mute);
    mute.setBounds( RelativeRectangle ("right - parent.width / 2,\
                                         bottom - parent.height / 4,\
                                         parent.width  ,\
                                         parent.height / 4 "));
    mute.addListener(this);
    
    
    addAndMakeVisible(numSteps);
    numSteps.setBounds( RelativeRectangle ("right - parent.width / 2,\
                                         bottom - parent.height / 4,\
                                         parent.width / 2 ,\
                                         parent.height *2/ 4 "));
    numSteps.setRange(2, 32,1);
    numSteps.addListener(this);

    
    
    addAndMakeVisible(generateStyle);
    generateStyle.addTab("No",Colours::beige, 0);
    generateStyle.addTab("Reversed",Colours::beige, 1);
    generateStyle.addTab("Random",Colours::beige, 2);
    generateStyle.setBounds( RelativeRectangle ("right - parent.width / 2,\
                                         bottom - parent.height / 4,\
                                         parent.width  ,\
                                         parent.height *2/ 4 "));
    

    

    generateStyle.addChangeListener(this);
    
    

    
}

HierarchicalShiftAudioProcessorEditor::~HierarchicalShiftAudioProcessorEditor()
{
}


void HierarchicalShiftAudioProcessorEditor::changeListenerCallback(ChangeBroadcaster* source){
    if(source == getProcessor()){
        
    }
    else if(source == &generateStyle){
        switch(generateStyle.getCurrentTabIndex()){
            case 0:
                getProcessor()->generateLinearBeatMap(false);
                break;
            case 1:
                getProcessor()->generateLinearBeatMap(true);
                break;
            case 2:
                getProcessor()->generateRandomBeatMap();
                break;
            default:
                jassertfalse;
                break;
        }
    }
    
}
//==============================================================================
void HierarchicalShiftAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Organic HiearchicalShift", getLocalBounds(), Justification::bottom, 1);
}

void HierarchicalShiftAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    

    
    
}

HierarchicalShiftAudioProcessor * HierarchicalShiftAudioProcessorEditor::getProcessor(){
    return (HierarchicalShiftAudioProcessor *)&processor;;
}

void HierarchicalShiftAudioProcessorEditor::buttonClicked(Button *b){
    if(b == &record){
    getProcessor()->setImmediateRecording(record.getToggleState());
    }
    
    
}

void HierarchicalShiftAudioProcessorEditor::sliderValueChanged(Slider *s){
    if(s==&numSteps){
        getProcessor()->setNumBeats(numSteps.getValue());
    }
    
}